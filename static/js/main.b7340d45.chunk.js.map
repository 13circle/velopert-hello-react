{"version":3,"sources":["Counter.js","App.js","serviceWorker.js","index.js"],"names":["containerStyle","height","display","alignItems","subContainerStyle","width","flexDirection","btnStyle","padding","textAlign","margin","fontSize","cursor","Problematic","Error","Counter","props","handleIncrease","bind","handleDecrease","state","number","error","console","log","nextProps","nextState","prevProps","prevState","info","this","setState","style","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"8OAEMA,EAAiB,CACrBC,OAAQ,OACRC,QAAS,OACTC,WAAY,UAGRC,EAAoB,CACxBF,QAAS,OACTG,MAAO,OACPC,cAAe,SACfH,WAAY,UAGRI,EAAW,CACfC,QAAS,QACTC,UAAW,SACXJ,MAAO,MACPK,OAAQ,QACRC,SAAU,OACVC,OAAQ,WAGJC,EAAc,WAClB,MAAM,IAAIC,MAAM,mBA4GHC,E,kDAvGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,MAAQ,CACXC,OAAQ,EACRC,OAAO,GAETC,QAAQC,IAAI,eARK,E,iEAkBjBD,QAAQC,IAAI,qC,0CAIZD,QAAQC,IAAI,uB,4CAGQC,EAAWC,GAI/B,OADAH,QAAQC,IAAI,yBACRE,EAAUL,OAAS,IAAM,I,0CAIXM,EAAWC,GAC7BL,QAAQC,IAAI,yB,yCAGKG,EAAWC,GAC5BL,QAAQC,IAAI,wB,wCAGIF,EAAOO,GACvBC,KAAKC,SAAS,CACZT,OAAO,M,uCAIM,IAMPD,EAAWS,KAAKV,MAAhBC,OACRS,KAAKC,SAAS,CACZV,OAAQA,EAAS,M,uCAUnBS,KAAKC,UAAS,kBAAiB,CAC7BV,OADY,EAAGA,OACE,Q,+BAKnB,OAAIS,KAAKV,MAAME,MAAc,kEAE3B,yBAAKU,MAAOhC,GACV,yBAAKgC,MAAO5B,GACV,uCACA,uCAAa0B,KAAKV,MAAMC,QAYD,IAAtBS,KAAKV,MAAMC,QAAgB,kBAAC,EAAD,MAC5B,yBAAKW,MAAO,CAAC3B,MAAO,gBAClB,4BAAQ4B,QAASH,KAAKb,eAAgBe,MAAOzB,GAA7C,KAGA,4BAAQ0B,QAASH,KAAKX,eAAgBa,MAAOzB,GAA7C,Y,GA9FU2B,aCpBPC,E,uKAJX,OAAO,kBAAC,EAAD,U,GAFOD,aCSEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACLC,QAAQD,MAAMA,EAAM+B,a","file":"static/js/main.b7340d45.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst containerStyle = {\r\n  height: \"60vh\",\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nconst subContainerStyle = {\r\n  display: \"flex\",\r\n  width: \"100%\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nconst btnStyle = {\r\n  padding: \"0.3em\",\r\n  textAlign: \"center\",\r\n  width: \"2em\",\r\n  margin: \"0.5em\",\r\n  fontSize: \"20pt\",\r\n  cursor: \"pointer\",\r\n};\r\n\r\nconst Problematic = () => {\r\n  throw new Error(\"Error DAISUKI!\");\r\n  return <div></div>;\r\n};\r\n\r\nclass Counter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleIncrease = this.handleIncrease.bind(this);\r\n    this.handleDecrease = this.handleDecrease.bind(this);\r\n    this.state = {\r\n      number: 0,\r\n      error: false,\r\n    };\r\n    console.log(\"constructor\");\r\n  }\r\n\r\n  /*\r\n  state = {\r\n    number: 0,\r\n  }\r\n  */\r\n\r\n  componentWillMount() {\r\n    console.log(\"componentWillMount (deprecated)\");\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"componentDidMount\");\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    // Abort re-rendering if the state \"number\" is\r\n    // a multiple of 5.\r\n    console.log(\"shouldComponentUpdate\");\r\n    if (nextState.number % 5 === 0) return false;\r\n    return true;\r\n  }\r\n\r\n  componentWillUpdate(prevProps, prevState) {\r\n    console.log(\"componentWillUpdate\");\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.log(\"componentDidUpdate\");\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  handleIncrease() {\r\n    /*\r\n    this.setState({\r\n      number: this.state.number + 1,\r\n    });\r\n    */\r\n    const { number } = this.state;\r\n    this.setState({\r\n      number: number + 1,\r\n    });\r\n  }\r\n\r\n  handleDecrease() {\r\n    /*\r\n    this.setState({\r\n      number: this.state.number - 1,\r\n    });\r\n    */\r\n    this.setState(({ number }) => ({\r\n      number: number - 1,\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) return <h1>Error at line 12: \"Error DAISUKI!\"</h1>;\r\n    return (\r\n      <div style={containerStyle}>\r\n        <div style={subContainerStyle}>\r\n          <h1>Counter</h1>\r\n          <div>Value: {this.state.number}</div>\r\n          {/**\r\n           * << CAUTION >>\r\n           * While setting an event prop, pass a function\r\n           * reference value only, not calling a function.\r\n           * Otherwise, it will cause infinite re-rendering\r\n           * with the following routine:\r\n           * Rendering -> Call function -> setState\r\n           * -> Re-rendering -> Call function -> ...\r\n           * Thus, DO NOT CALL YOUR METHODS OR FUNCTIONS\r\n           * WHILE SETTING AN EVENT.\r\n           */}\r\n          {this.state.number === 4 && <Problematic />}\r\n          <div style={{width: \"fit-content\"}}>\r\n            <button onClick={this.handleIncrease} style={btnStyle}>\r\n              +\r\n            </button>\r\n            <button onClick={this.handleDecrease} style={btnStyle}>\r\n              -\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\nimport Counter from \"./Counter\";\n\nclass App extends Component {\n  render() {\n    return <Counter />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}